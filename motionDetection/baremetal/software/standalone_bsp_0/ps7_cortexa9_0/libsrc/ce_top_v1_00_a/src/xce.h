// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2013.3
// Copyright (C) 2013 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef XCE_H
#define XCE_H

#ifdef __cplusplus
extern "C" {
#endif

/***************************** Include Files *********************************/
#ifndef __linux__
#include "xil_types.h"
#include "xil_assert.h"
#include "xstatus.h"
#include "xil_io.h"
#else
#include <stdint.h>
#include <assert.h>
#include <dirent.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <unistd.h>
#include <stddef.h>
#endif
#include "xce_hw.h"

/**************************** Type Definitions ******************************/
#ifdef __linux__
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
#else
typedef struct {
    u16 DeviceId;
    u32 Slv_para_BaseAddress;
} XCe_Config;
#endif

typedef struct {
    u32 Slv_para_BaseAddress;
    u32 IsReady;
} XCe;

/***************** Macros (Inline Functions) Definitions *********************/
#ifndef __linux__
#define XCe_WriteReg(BaseAddress, RegOffset, Data) \
    Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))
#define XCe_ReadReg(BaseAddress, RegOffset) \
    Xil_In32((BaseAddress) + (RegOffset))
#else
#define XCe_WriteReg(BaseAddress, RegOffset, Data) \
    *(volatile u32*)((BaseAddress) + (RegOffset)) = (u32)(Data)
#define XCe_ReadReg(BaseAddress, RegOffset) \
    *(volatile u32*)((BaseAddress) + (RegOffset))

#define Xil_AssertVoid(expr)    assert(expr)
#define Xil_AssertNonvoid(expr) assert(expr)

#define XST_SUCCESS             0
#define XST_DEVICE_NOT_FOUND    2
#define XST_OPEN_DEVICE_FAILED  3
#define XIL_COMPONENT_IS_READY  1
#endif

/************************** Function Prototypes *****************************/
#ifndef __linux__
int XCe_Initialize(XCe *InstancePtr, u16 DeviceId);
XCe_Config* XCe_LookupConfig(u16 DeviceId);
int XCe_CfgInitialize(XCe *InstancePtr, XCe_Config *ConfigPtr);
#else
int XCe_Initialize(XCe *InstancePtr, const char* InstanceName);
int XCe_Release(XCe *InstancePtr);
#endif

void XCe_Start(XCe *InstancePtr);
u32 XCe_IsDone(XCe *InstancePtr);
u32 XCe_IsIdle(XCe *InstancePtr);
u32 XCe_IsReady(XCe *InstancePtr);
void XCe_EnableAutoRestart(XCe *InstancePtr);
void XCe_DisableAutoRestart(XCe *InstancePtr);

void XCe_SetWidth(XCe *InstancePtr, u32 Data);
u32 XCe_GetWidth(XCe *InstancePtr);
void XCe_SetHeight(XCe *InstancePtr, u32 Data);
u32 XCe_GetHeight(XCe *InstancePtr);
void XCe_SetCsd1(XCe *InstancePtr, u32 Data);
u32 XCe_GetCsd1(XCe *InstancePtr);
void XCe_SetCsd2(XCe *InstancePtr, u32 Data);
u32 XCe_GetCsd2(XCe *InstancePtr);
void XCe_SetEpsilon(XCe *InstancePtr, u32 Data);
u32 XCe_GetEpsilon(XCe *InstancePtr);
void XCe_SetReadaddress(XCe *InstancePtr, u32 Data);
u32 XCe_GetReadaddress(XCe *InstancePtr);
void XCe_SetWriteaddress(XCe *InstancePtr, u32 Data);
u32 XCe_GetWriteaddress(XCe *InstancePtr);

void XCe_InterruptGlobalEnable(XCe *InstancePtr);
void XCe_InterruptGlobalDisable(XCe *InstancePtr);
void XCe_InterruptEnable(XCe *InstancePtr, u32 Mask);
void XCe_InterruptDisable(XCe *InstancePtr, u32 Mask);
void XCe_InterruptClear(XCe *InstancePtr, u32 Mask);
u32 XCe_InterruptGetEnabled(XCe *InstancePtr);
u32 XCe_InterruptGetStatus(XCe *InstancePtr);

#ifdef __cplusplus
}
#endif

#endif
